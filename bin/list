#!/usr/bin/env ruby
# coding: UTF-8

require 'optparse'
require 'active_support'
require 'active_support/core_ext/numeric/conversions'
require 'sengi'


@options = {
}
opts = OptionParser.new do |o|
	o.banner = 'Usage: list'
	o.separator('')
	
	#o.on('--no-scheme', "Don't print the scheme.") do
	#end
	
	o.on_tail('-h', '--help', 'Show this message.') do
		puts o
		puts
		exit 3
	end
end
ARGV << '-h' if ARGV.count == 0
commands = opts.parse(ARGV)

@redis = Hiredis::Connection.new
@redis.connect('127.0.0.1', 7000)
@redis.write(['SELECT', 1])
@redis.read

command = commands.shift

if command == 'urls'
	@redis.write(['GET', 'urls:id'])
	urls_id = @redis.read.to_i
	
	(1..urls_id).each do |url_id|
		@redis.write(['HGETALL', "urls:#{url_id}"])
		raw_url = @redis.read
		if raw_url.length > 0
			url = Hash[*raw_url]
			uri = URI(url['url'])
			puts '%s' % [uri.to_s]
		end
	end
elsif command == 'stats'
	traffic_out = 0
	traffic_in = 0
	
	@redis.write(['GET', "urls:id"])
	urls_id = @redis.read.to_i
	
	@redis.write(['GET', "requests:id"])
	requests_id = @redis.read.to_i
	
	@redis.write(['GET', "responses:id"])
	responses_id = @redis.read.to_i
	
	(1..urls_id).each do |url_id|
		@redis.write(['HGETALL', "urls:#{url_id}"])
		raw_url = @redis.read
		if raw_url.length > 0
			url = Hash[*raw_url]
			
			@redis.write(['SMEMBERS', "urls:#{url_id}:requests"])
			request_ids = @redis.read.map{ |rid| rid.to_i }
			request_ids.each do |request_id|
				@redis.write(['HGETALL', "requests:#{request_id}"])
				raw_request = @redis.read
				if raw_request.length > 0
					request = Hash[*raw_request]
					traffic_out += request['size'].to_i
				end
			end
			
			@redis.write(['SMEMBERS', "urls:#{url_id}:responses"])
			response_ids = @redis.read.map{ |rid| rid.to_i }
			response_ids.each do |response_id|
				@redis.write(['HGETALL', "responses:#{response_id}"])
				raw_response = @redis.read
				if raw_response.length > 0
					response = Hash[*raw_response]
					traffic_in += response['size'].to_i
				end
			end
		end
	end
	
	puts "urls id:       %6d" % [urls_id]
	puts "requests id:   %6d" % [requests_id]
	puts "responses id:  %6d" % [responses_id]
	puts
	
	puts 'traffic'
	puts 'bytes out: %9d (%s)' % [traffic_out, traffic_out.to_s(:human_size, precision: 2)]
	puts 'bytes in:  %9d (%s)' % [traffic_in, traffic_in.to_s(:human_size, precision: 2)]
end
